# See `perldoc Vroom::Vroom` for complete details.
---- config
title: CatalystX::Controller::Sugar
indent: 4
height: 50
width: 110
skip: 0

---- center
CatalystX::Controller::Sugar

by Jan Henning Thorsen

(hint: press the spacebar)

----
== What is and why Cx::C::Sugar?

+* Written to simplify the way chained actions are described
+* Includes sugar to declare private actions as well
+* Plus more sugar for convenience

+sub foo :Private {
    my($self, $c) = @_;
    $c->stash->{'foo'} = 42;
}

----
== Chained and private actions

Left side: Standard Catalyst
Right side: With Cx::C::Sugar

+package App::Controller::Foo                           | package App::Controller::Foo
use Moose;                                             | use CatalystX::Controller::Sugar;
BEGIN { extends 'Catalyst::Controller' }               |

+* Private action
sub authenticate : Private {                           | private authenticate => sub {
    my($self, $c, @args) = @_;                         |     my @args = @_;
}                                                      | }; # note semicolon

+* Chain anchor or root chain
sub root : Chained('/') PathPart('') CaptureArgs(0) {  | chain sub {
    my($self, $c) = @_;                                |     # no args
}                                                      | };

+* Endpoint: http://foo.com/...
sub default : Chained('/root') PathPart('') Args {     | chain '' => sub {
    my($self, $c, @args) = @_;                         |     my @args = @_;
}                                                      | };

+* Endpoint: http://foo.com/info/...
sub info : Chained('/root') PathPart Args {            | chain info => sub {
    my($self, $c, @args) = @_;                         |     my @args = @_;
}                                                      | };

+* Endpoint: http://foo.com/search/*
sub search : Chained('/root') PathPart Args(1) {       | chain search => 1 => sub {
    my($self, $c, $query) = @_;                        |     my $query = shift;
}                                                      | };
----
== More chained actions with captures
+* Chain: http://foo.com/user/*/...
sub user : Chained('/') PathPart CaptureArgs(1) {  | chain user => [qw/id/], sub {
    my($self, $c, $id) = @_;                       |     my $id = shift;
}                                                  | };
+* Endpoint: http://foo.com/user/*/edit/...
sub edit : Chained('/user') PathPart Args {        | chain 'user:1' => edit => sub {
    my($self, $c, @args) = @_;                     |     my @args = @_;
                                                   |     my $id = captured('id'); # extra
}                                                  | };
----
== What about $self and $c?

+* $self = controller()
+* $c    = c()
+* Example:

sub foo : Private {                     | private foo => sub {
    my($self, $c, @args) = @_;          |     my @args = @_;
                                        |
    if($self->config->{'something'}) {  |     if(controller->config->{'something'}) {
        $c->res->body("42");            |         c->res->body("42");
    }                                   |     }
}                                       | };
----
== More sugar?

+* $c->forward('/some/action', ...)  | forward '/some/action', ...;
+* $c->go('/some/action', ...)       | go '/some/action', ...;
+* $c->req->param('foo')             | req->param('foo')
+* $c->res->body('hello world')      | res->body('hello world')
+* $c->stash->{'foo'} = 42           | stash foo => 42; or stash->{'foo'} = 42;
+* $c->session->{'foo'} = 42         | session foo => 42; or session->{'foo'} = 42;
+* $c->log->$level($msg);            | report $level => $format, @args;
----
== What about shared actions/plugins?

+#==============================================================
package App::FooPlugin;
use CatalystX::Controller::Sugar::Plugin;

chain foo => sub {
    # ...
};

#==============================================================
package App;
use Moose;
extends 'Catalyst';

after setup_components => sub {
    App::FooPlugin->inject('App::Controller::Root');
    App::FooPlugin->inject('App::Controller::NON_EXISTENT');
};

__PACKAGE__->setup;
----
== What about shared actions/plugins?

Or...

+package App::Controller::Foo;
use CatalystX::Controller::Sugar;
use App::FooPlugin;

App::FooPlugin->inject;

1;

(Plugins also support moose attributes)
----
== What else?

+* CatalystX::Controller::Sugar
 * CatalystX::Controller::Sugar::Plugin
+* CatalystX::Controller::Sugar::ActionPack
 * CatalystX::Controller::Sugar::ActionPack::Default
 * CatalystX::Controller::Sugar::ActionPack::End
 * CatalystX::Controller::Sugar::ActionPack::Error
 * CatalystX::Controller::Sugar::ActionPack::Merge
----
== Alternatives?

+* Sugar:
 * CatalystX::Declare

use CatalystX::Declare;

controller MyApp::Web::Controller::Foo with MyApp::Web::ControllerRole::Bar {
    action base under '/' as '';
    under base {
        final action welcome {
            $ctx->response->body( $self->welcome_message );
        }
    }
}

----
== Alternatives?
* Plugins
 * Standard Catalyst with inheritance or roles
----
== What is next?

+* Use the meta object to store and create actions
 * To support "action modifiers" (before/after/around)

----
== The end

* Presentation: http://jhthorsen.github.com/catalystx-controller-sugar
* Source:       http://github.com/jhthorsen/catalystx-controller-sugar
* Module:       http://search.cpan.org/dist/CatalystX-Controller-Sugar
